(function(angular){
'use strict';
angular
  .module('root', [
    'common',
    'components',
    'templates'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('components', [
    'components.contact',
    'components.auth'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('common', [
    'ui.router'
  ]);
  // .run(function ($transitions, cfpLoadingBar) {
  //   $transitions.onStart){}, cfpLoadingBar.start);
  //   $transitions.onSuccess({}, cfpLoadingBar.complete);
  // });
})(window.angular);
(function(angular){
'use strict';
angular
  .module('components.auth', [
    'ui.router',
    'ngParse'
  ])

  .config(['ParseProvider', function ($ParseProvider) {

    var MY_PARSE_APP_ID = 'Na9nmnwnvmp67Yt1BZ7jFKCCo1SUV8j04gbGFidH';
    var MY_PARSE_JS_KEY = 'bCUH3t5l5Ilyp19krDC4dv0jZuxmLC6OyQH8hztJ';
    $ParseProvider.initialize(MY_PARSE_APP_ID, MY_PARSE_JS_KEY);
    $ParseProvider.serverURL = 'https://parseapi.back4app.com/';
  }]);

  // .run(function ($transitions, $state, AuthService) {
    // $transitions.onStart({
    //   to: function (state) {
    //     return !!(state.data && state.data.requiredAuth);
    //   }
  //   }, function () {
  //     return AuthService
  //       .requireAuthentication()
  //       .catch(function () {
  //         return $state.target('auth.login');
  //       });
    // });
  //   $transitions.onStart({
  //     to: 'auth.*'
  //   }, function () {
  //     if (AuthService.isAuthenticated()) {
  //       return $state.target('app');
  //     }
  //   });
  // });
})(window.angular);
(function(angular){
'use strict';
angular
  .module('components.contact', [
    'ui.router'
  ]);
})(window.angular);
(function(angular){
'use strict';
var root = {
  templateUrl: './root.html'
};

angular
  .module('root')
  .component('root', root);
})(window.angular);
(function(angular){
'use strict';
var appNav = {
  binfings: {
    user: '<',
    onLogout: '&'
  },
  templateUrl: './app-nav.html'
};

angular
  .module('common')
  .component('appNav', appNav);
})(window.angular);
(function(angular){
'use strict';
var app = {
  templateUrl: './app.html',
  controller: 'AppController'
};

angular
  .module('common')
  .component('app', app)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('app', {
        //redirectTo: 'contacts',
        url: '/app',
        data: {
          requiredAuth: true
        },
        component: 'app'
      })
  }]);
})(window.angular);
(function(angular){
'use strict';
AppController.$inject = ["AuthService", "$state"];
function AppController(AuthService, $state) {
  var ctrl = this;
  ctrl.user = AuthService.getUser();
  ctrl.logout = function () {
    AuthService.logout().then(function () {
      $state.go('auth.login');
    });
  };
}

angular
  .module('common')
  .controller('AppController', AppController);
})(window.angular);
(function(angular){
'use strict';
init.$inject = ["$uiRouter"];
function init($uiRouter) {
  var Visualizer = window['ui-router-visualizer'].Visualizer;
  var pluginInstance = $uiRouter.plugin(Visualizer);
}

angular
  .module('common')
  .run(init)
})(window.angular);
(function(angular){
'use strict';
AuthService.$inject = ["Parse"];
function AuthService(Parse) {
  var auth = new Parse.User();
  var authData = null;
  function storeAuthData(response) {
    authData = response;
    return authData;
  }
  // function onSignIn(user) {
  //   authData = user;
  //   return auth.$requireSignIn();
  // }
  function clearAuthData() {
    authData = null;
  }

  this.register = function (user) {
    auth.set("username", user.email);
    auth.set("email", user.email);
    auth.set("password", user.password);
      return auth
        .signUp(null, {
          success: function(auth) {
          },
          error: function(auth, error) {
          alert("Error: " + error.code + " " + error.message);
          }
        })
        .then(storeAuthData);
  };

  this.login = function (user) {
    auth.set("username", user.email);
    auth.set("email", user.email);
    auth.set("password", user.password);
    return auth
      .logIn(user.email, user.password, {
        success: function(auth) {
        },
        error: function(auth, error) {
        }
      })
      .then(storeAuthData);
  };

  this.logout = function () {
    return auth
    .logOut().then(() => {
      authData = Parse.User.current();
    })
    .then(clearAuthData);
  };
  //
  // this.requireAuthentication = function () {
  //   return auth
  //     .$waitForSignIn().then(onSignIn);
  // };
  //

  this.isAuthenticated = function () {
    return !!authData;
  };

  this.getUser = function () {
    if (authData) {
      return authData;
    }
  };
};

angular
  .module('components.auth')
  .service('AuthService', AuthService);
})(window.angular);
(function(angular){
'use strict';
var authForm = {
  bindings: {
    user: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './auth-form.html',
  controller: 'AuthFormController'
};

angular
  .module('components.auth')
  .component('authForm', authForm);
})(window.angular);
(function(angular){
'use strict';
function AuthFormController() {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.user) {
      ctrl.user = angular.copy(ctrl.user);
    }
  };
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
        user: ctrl.user
      }
    });
  };
}

angular
  .module('components.auth')
  .controller('AuthFormController', AuthFormController);
})(window.angular);
(function(angular){
'use strict';
var login = {
  templateUrl: './login.html',
  controller: 'LoginController'
};

angular
  .module('components.auth')
  .component('login', login)
  .config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
    $stateProvider
      .state('auth', {
        redirectTo: 'auth.login',
        url: '/auth',
        template: '<div ui-view></div>'
      })
      .state('auth.login', {
        url: '/login',
        component: 'login'
      });
    $urlRouterProvider.otherwise('/auth/login');
  }]);
})(window.angular);
(function(angular){
'use strict';
LoginController.$inject = ["AuthService", "$state"];
function LoginController(AuthService, $state) {
  var ctrl = this;
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = {
      email: '',
      password: ''
    };
  };
  ctrl.loginUser = function (event) {
    return AuthService
      .login(event.user)
      .then(function () {
        $state.go('app');
      }, function (reason) {
        ctrl.error = reason.message;
      });
  };
}

angular
  .module('components.auth')
  .controller('LoginController', LoginController);
})(window.angular);
(function(angular){
'use strict';
var register = {
  templateUrl: './register.html',
  controller: 'RegisterController'
};

angular
  .module('components.auth')
  .component('register', register)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('auth.register', {
        url: '/register',
        component: 'register'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';
RegisterController.$inject = ["AuthService", "$state"];
function RegisterController(AuthService, $state) {
  var ctrl = this;
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = {
      email: '',
      password: ''
    };
  };
  ctrl.createUser = function (event) {
    return AuthService
      .register(event.user)
      .then(function () {
        $state.go('app');
      }, function (reason) {
        ctrl.error = reason.message;
      });
  };
}

angular
  .module('components.auth')
  .controller('RegisterController', RegisterController);
})(window.angular);
(function(angular){
'use strict';
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('./root.html','<div class="root">\n  <div ui-view></div>\n</div>\n');
$templateCache.put('./app-nav.html','<header class="header">\n  <div class="header__fixed">\n    <div>\n      <div class="header__brand">\n        Contacts\n        <a href="" class="header__button header__button--new-contact">\n          <i class="material-icons">add_circle_outline</i>\n          New Contact\n        </a>\n      </div>\n      <div class="header__logout">\n        {{ ::$ctrl.user.email }}\n        <a href="" ng-click="$ctrl.onLogout();">\n          <span class="header__button">\n            <i class="material-icons">power_settings_new</i>\n            Logout\n          </span>\n        </a>\n      </div>\n    </div>\n  </div>\n</header>\n');
$templateCache.put('./app.html','<div class="root">\n  <app-nav user="$ctrl.user" on-logout="$ctrl.logout();"></app-nav>\n  <div class="app">\n    <div ui-view></div>\n  </div>\n</div>\n');
$templateCache.put('./register.html','<div class="auth">\n  <h1>Register</h1>\n  <auth-form\n    user="$ctrl.user"\n    message="{{ $ctrl.error }}"\n    button="Create user"\n    on-submit="$ctrl.createUser($event);">\n  </auth-form>\n</div>\n<div class="auth__info">\n  <a ui-sref="auth.login">\n    Already have an account? Login here.\n  </a>\n</div>\n');
$templateCache.put('./login.html','<div class="auth">\n  <h1>Login</h1>\n  <auth-form\n    user="$ctrl.user"\n    message="{{ $ctrl.error }}"\n    button="Login"\n    on-submit="$ctrl.loginUser($event);">\n  </auth-form>\n</div>\n<div class="auth__info">\n  <a ui-sref="auth.register">\n    Don\'t have an account? Create one here.\n  </a>\n</div>\n');
$templateCache.put('./auth-form.html','<form name="authForm" novalidate ng-submit="$ctrl.submitForm();">\n  <label>\n    <input\n      type="email"\n      name="email"\n      required="required"\n      placeholder="Enter your email"\n      ng-model="$ctrl.user.email">\n  </label>\n  <label>\n    <input\n      type="password"\n      name="password"\n      required="required"\n      placeholder="Enter your password"\n      ng-model="$ctrl.user.password">\n  </label>\n  <div class="auth-button">\n    <button type="submit" ng-disabled="authForm.$invalid">\n      {{ $ctrl.button }}\n    </button>\n  </div>\n  <div ng-if="$ctrl.message">\n    {{ $ctrl.message }}\n  </div>\n</form>\n');}]);})(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvb3QubW9kdWxlLmpzIiwiY29tcG9uZW50cy9jb21wb25lbnRzLm1vZHVsZS5qcyIsImNvbW1vbi9hcHAubW9kdWxlLmpzIiwiY29tcG9uZW50cy9hdXRoL2F1dGgubW9kdWxlLmpzIiwiY29tcG9uZW50cy9jb250YWN0L2NvbnRhY3QubW9kdWxlLmpzIiwicm9vdC5jb21wb25lbnQuanMiLCJjb21tb24vYXBwLW5hdi5jb21wb25lbnQuanMiLCJjb21tb24vYXBwLmNvbXBvbmVudC5qcyIsImNvbW1vbi9hcHAuY29udHJvbGxlci5qcyIsImNvbW1vbi9hcHAucnVuLmpzIiwiY29tcG9uZW50cy9hdXRoL2F1dGguc2VydmljZS5qcyIsImNvbXBvbmVudHMvYXV0aC9hdXRoLWZvcm0vYXV0aC1mb3JtLmNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvYXV0aC9hdXRoLWZvcm0vYXV0aC1mb3JtLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9hdXRoL2xvZ2luL2xvZ2luLmNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL2F1dGgvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9hdXRoL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbnRyb2xsZXIuanMiLCJ0ZW1wbGF0ZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQSxTQUFBLFFBQUE7QUFDQTtBQUNBO0dBQ0EsT0FBQSxRQUFBO0lBQ0E7SUFDQTtJQUNBOztHQUVBLE9BQUE7QUNSQSxDQUFBLFNBQUEsUUFBQTtBQUNBO0FBQ0E7R0FDQSxPQUFBLGNBQUE7SUFDQTtJQUNBOztHQUVBLE9BQUE7QUNQQSxDQUFBLFNBQUEsUUFBQTtBQUNBO0FBQ0E7R0FDQSxPQUFBLFVBQUE7SUFDQTs7Ozs7O0dBTUEsT0FBQTtBQ1ZBLENBQUEsU0FBQSxRQUFBO0FBQ0E7QUFDQTtHQUNBLE9BQUEsbUJBQUE7SUFDQTtJQUNBOzs7R0FHQSxPQUFBLENBQUEsaUJBQUEsVUFBQSxnQkFBQTs7SUFFQSxJQUFBLGtCQUFBO0lBQ0EsSUFBQSxrQkFBQTtJQUNBLGVBQUEsV0FBQSxpQkFBQTtJQUNBLGVBQUEsWUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1QkEsT0FBQTtBQ3BDQSxDQUFBLFNBQUEsUUFBQTtBQUNBO0FBQ0E7R0FDQSxPQUFBLHNCQUFBO0lBQ0E7O0dBRUEsT0FBQTtBQ05BLENBQUEsU0FBQSxRQUFBO0FBQ0E7QUFDQSxJQUFBLE9BQUE7RUFDQSxhQUFBOzs7QUFHQTtHQUNBLE9BQUE7R0FDQSxVQUFBLFFBQUE7R0FDQSxPQUFBO0FDVEEsQ0FBQSxTQUFBLFFBQUE7QUFDQTtBQUNBLElBQUEsU0FBQTtFQUNBLFVBQUE7SUFDQSxNQUFBO0lBQ0EsVUFBQTs7RUFFQSxhQUFBOzs7QUFHQTtHQUNBLE9BQUE7R0FDQSxVQUFBLFVBQUE7R0FDQSxPQUFBO0FDYkEsQ0FBQSxTQUFBLFFBQUE7QUFDQTtBQUNBLElBQUEsTUFBQTtFQUNBLGFBQUE7RUFDQSxZQUFBOzs7QUFHQTtHQUNBLE9BQUE7R0FDQSxVQUFBLE9BQUE7R0FDQSwwQkFBQSxVQUFBLGdCQUFBO0lBQ0E7T0FDQSxNQUFBLE9BQUE7O1FBRUEsS0FBQTtRQUNBLE1BQUE7VUFDQSxjQUFBOztRQUVBLFdBQUE7OztHQUdBLE9BQUE7QUNyQkEsQ0FBQSxTQUFBLFFBQUE7O21EQUNBO0FBQ0EsU0FBQSxjQUFBLGFBQUEsUUFBQTtFQUNBLElBQUEsT0FBQTtFQUNBLEtBQUEsT0FBQSxZQUFBO0VBQ0EsS0FBQSxTQUFBLFlBQUE7SUFDQSxZQUFBLFNBQUEsS0FBQSxZQUFBO01BQ0EsT0FBQSxHQUFBOzs7OztBQUtBO0dBQ0EsT0FBQTtHQUNBLFdBQUEsaUJBQUE7R0FDQSxPQUFBO0FDZkEsQ0FBQSxTQUFBLFFBQUE7OzhCQUNBO0FBQ0EsU0FBQSxLQUFBLFdBQUE7RUFDQSxJQUFBLGFBQUEsT0FBQSx3QkFBQTtFQUNBLElBQUEsaUJBQUEsVUFBQSxPQUFBOzs7QUFHQTtHQUNBLE9BQUE7R0FDQSxJQUFBO0dBQ0EsT0FBQTtBQ1ZBLENBQUEsU0FBQSxRQUFBOztpQ0FDQTtBQUNBLFNBQUEsWUFBQSxPQUFBO0VBQ0EsSUFBQSxPQUFBLElBQUEsTUFBQTtFQUNBLElBQUEsV0FBQTtFQUNBLFNBQUEsY0FBQSxVQUFBO0lBQ0EsV0FBQTtJQUNBLE9BQUE7Ozs7OztFQU1BLFNBQUEsZ0JBQUE7SUFDQSxXQUFBOzs7RUFHQSxLQUFBLFdBQUEsVUFBQSxNQUFBO0lBQ0EsS0FBQSxJQUFBLFlBQUEsS0FBQTtJQUNBLEtBQUEsSUFBQSxTQUFBLEtBQUE7SUFDQSxLQUFBLElBQUEsWUFBQSxLQUFBO01BQ0EsT0FBQTtTQUNBLE9BQUEsTUFBQTtVQUNBLFNBQUEsU0FBQSxNQUFBOztVQUVBLE9BQUEsU0FBQSxNQUFBLE9BQUE7VUFDQSxNQUFBLFlBQUEsTUFBQSxPQUFBLE1BQUEsTUFBQTs7O1NBR0EsS0FBQTs7O0VBR0EsS0FBQSxRQUFBLFVBQUEsTUFBQTtJQUNBLEtBQUEsSUFBQSxZQUFBLEtBQUE7SUFDQSxLQUFBLElBQUEsU0FBQSxLQUFBO0lBQ0EsS0FBQSxJQUFBLFlBQUEsS0FBQTtJQUNBLE9BQUE7T0FDQSxNQUFBLEtBQUEsT0FBQSxLQUFBLFVBQUE7UUFDQSxTQUFBLFNBQUEsTUFBQTs7UUFFQSxPQUFBLFNBQUEsTUFBQSxPQUFBOzs7T0FHQSxLQUFBOzs7RUFHQSxLQUFBLFNBQUEsWUFBQTtJQUNBLE9BQUE7S0FDQSxTQUFBLEtBQUE7OztLQUdBLEtBQUE7Ozs7Ozs7OztFQVNBLEtBQUEsa0JBQUEsWUFBQTtJQUNBLE9BQUEsQ0FBQSxDQUFBOzs7RUFHQSxLQUFBLFVBQUEsWUFBQTtJQUNBLElBQUEsVUFBQTtNQUNBLE9BQUE7OztDQUdBOztBQUVBO0dBQ0EsT0FBQTtHQUNBLFFBQUEsZUFBQTtHQUNBLE9BQUE7QUMxRUEsQ0FBQSxTQUFBLFFBQUE7QUFDQTtBQUNBLElBQUEsV0FBQTtFQUNBLFVBQUE7SUFDQSxNQUFBO0lBQ0EsUUFBQTtJQUNBLFNBQUE7SUFDQSxVQUFBOztFQUVBLGFBQUE7RUFDQSxZQUFBOzs7QUFHQTtHQUNBLE9BQUE7R0FDQSxVQUFBLFlBQUE7R0FDQSxPQUFBO0FDaEJBLENBQUEsU0FBQSxRQUFBO0FBQ0E7QUFDQSxTQUFBLHFCQUFBO0VBQ0EsSUFBQSxPQUFBO0VBQ0EsS0FBQSxhQUFBLFVBQUEsU0FBQTtJQUNBLElBQUEsUUFBQSxNQUFBO01BQ0EsS0FBQSxPQUFBLFFBQUEsS0FBQSxLQUFBOzs7RUFHQSxLQUFBLGFBQUEsWUFBQTtJQUNBLEtBQUEsU0FBQTtNQUNBLFFBQUE7UUFDQSxNQUFBLEtBQUE7Ozs7OztBQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsc0JBQUE7R0FDQSxPQUFBO0FDckJBLENBQUEsU0FBQSxRQUFBO0FBQ0E7QUFDQSxJQUFBLFFBQUE7RUFDQSxhQUFBO0VBQ0EsWUFBQTs7O0FBR0E7R0FDQSxPQUFBO0dBQ0EsVUFBQSxTQUFBO0dBQ0EsZ0RBQUEsVUFBQSxnQkFBQSxvQkFBQTtJQUNBO09BQ0EsTUFBQSxRQUFBO1FBQ0EsWUFBQTtRQUNBLEtBQUE7UUFDQSxVQUFBOztPQUVBLE1BQUEsY0FBQTtRQUNBLEtBQUE7UUFDQSxXQUFBOztJQUVBLG1CQUFBLFVBQUE7O0dBRUEsT0FBQTtBQ3ZCQSxDQUFBLFNBQUEsUUFBQTs7cURBQ0E7QUFDQSxTQUFBLGdCQUFBLGFBQUEsUUFBQTtFQUNBLElBQUEsT0FBQTtFQUNBLEtBQUEsVUFBQSxZQUFBO0lBQ0EsS0FBQSxRQUFBO0lBQ0EsS0FBQSxPQUFBO01BQ0EsT0FBQTtNQUNBLFVBQUE7OztFQUdBLEtBQUEsWUFBQSxVQUFBLE9BQUE7SUFDQSxPQUFBO09BQ0EsTUFBQSxNQUFBO09BQ0EsS0FBQSxZQUFBO1FBQ0EsT0FBQSxHQUFBO1NBQ0EsVUFBQSxRQUFBO1FBQ0EsS0FBQSxRQUFBLE9BQUE7Ozs7O0FBS0E7R0FDQSxPQUFBO0dBQ0EsV0FBQSxtQkFBQTtHQUNBLE9BQUE7QUN6QkEsQ0FBQSxTQUFBLFFBQUE7QUFDQTtBQUNBLElBQUEsV0FBQTtFQUNBLGFBQUE7RUFDQSxZQUFBOzs7QUFHQTtHQUNBLE9BQUE7R0FDQSxVQUFBLFlBQUE7R0FDQSwwQkFBQSxVQUFBLGdCQUFBO0lBQ0E7T0FDQSxNQUFBLGlCQUFBO1FBQ0EsS0FBQTtRQUNBLFdBQUE7OztHQUdBLE9BQUE7QUNqQkEsQ0FBQSxTQUFBLFFBQUE7O3dEQUNBO0FBQ0EsU0FBQSxtQkFBQSxhQUFBLFFBQUE7RUFDQSxJQUFBLE9BQUE7RUFDQSxLQUFBLFVBQUEsWUFBQTtJQUNBLEtBQUEsUUFBQTtJQUNBLEtBQUEsT0FBQTtNQUNBLE9BQUE7TUFDQSxVQUFBOzs7RUFHQSxLQUFBLGFBQUEsVUFBQSxPQUFBO0lBQ0EsT0FBQTtPQUNBLFNBQUEsTUFBQTtPQUNBLEtBQUEsWUFBQTtRQUNBLE9BQUEsR0FBQTtTQUNBLFVBQUEsUUFBQTtRQUNBLEtBQUEsUUFBQSxPQUFBOzs7OztBQUtBO0dBQ0EsT0FBQTtHQUNBLFdBQUEsc0JBQUE7R0FDQSxPQUFBO0FDekJBLENBQUEsU0FBQSxRQUFBO0FBQ0E7QUFDQSxRQUFBLE9BQUEsYUFBQSxJQUFBLElBQUEsQ0FBQSxrQkFBQSxTQUFBLGdCQUFBLENBQUEsZUFBQSxJQUFBLGNBQUE7QUFDQSxlQUFBLElBQUEsaUJBQUE7QUFDQSxlQUFBLElBQUEsYUFBQTtBQUNBLGVBQUEsSUFBQSxrQkFBQTtBQUNBLGVBQUEsSUFBQSxlQUFBO0FBQ0EsZUFBQSxJQUFBLG1CQUFBLGlwQkFBQSxPQUFBLFNBQUEiLCJmaWxlIjoibWFpbi0xNTI1Mzc4NzE5MTUwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbiAgLm1vZHVsZSgncm9vdCcsIFtcbiAgICAnY29tbW9uJyxcbiAgICAnY29tcG9uZW50cycsXG4gICAgJ3RlbXBsYXRlcydcbiAgXSk7XG4iLCJhbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbXBvbmVudHMnLCBbXG4gICAgJ2NvbXBvbmVudHMuY29udGFjdCcsXG4gICAgJ2NvbXBvbmVudHMuYXV0aCdcbiAgXSk7XG4iLCJhbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbW1vbicsIFtcbiAgICAndWkucm91dGVyJ1xuICBdKTtcbiAgLy8gLnJ1bihmdW5jdGlvbiAoJHRyYW5zaXRpb25zLCBjZnBMb2FkaW5nQmFyKSB7XG4gIC8vICAgJHRyYW5zaXRpb25zLm9uU3RhcnQpe30sIGNmcExvYWRpbmdCYXIuc3RhcnQpO1xuICAvLyAgICR0cmFuc2l0aW9ucy5vblN1Y2Nlc3Moe30sIGNmcExvYWRpbmdCYXIuY29tcGxldGUpO1xuICAvLyB9KTtcbiIsImFuZ3VsYXJcbiAgLm1vZHVsZSgnY29tcG9uZW50cy5hdXRoJywgW1xuICAgICd1aS5yb3V0ZXInLFxuICAgICduZ1BhcnNlJ1xuICBdKVxuXG4gIC5jb25maWcoWydQYXJzZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRQYXJzZVByb3ZpZGVyKSB7XG5cbiAgICB2YXIgTVlfUEFSU0VfQVBQX0lEID0gJ05hOW5tbndudm1wNjdZdDFCWjdqRktDQ28xU1VWOGowNGdiR0ZpZEgnO1xuICAgIHZhciBNWV9QQVJTRV9KU19LRVkgPSAnYkNVSDN0NWw1SWx5cDE5a3JEQzRkdjBqWnV4bUxDNk95UUg4aHp0Sic7XG4gICAgJFBhcnNlUHJvdmlkZXIuaW5pdGlhbGl6ZShNWV9QQVJTRV9BUFBfSUQsIE1ZX1BBUlNFX0pTX0tFWSk7XG4gICAgJFBhcnNlUHJvdmlkZXIuc2VydmVyVVJMID0gJ2h0dHBzOi8vcGFyc2VhcGkuYmFjazRhcHAuY29tLyc7XG4gIH1dKTtcblxuICAvLyAucnVuKGZ1bmN0aW9uICgkdHJhbnNpdGlvbnMsICRzdGF0ZSwgQXV0aFNlcnZpY2UpIHtcbiAgICAvLyAkdHJhbnNpdGlvbnMub25TdGFydCh7XG4gICAgLy8gICB0bzogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgLy8gICAgIHJldHVybiAhIShzdGF0ZS5kYXRhICYmIHN0YXRlLmRhdGEucmVxdWlyZWRBdXRoKTtcbiAgICAvLyAgIH1cbiAgLy8gICB9LCBmdW5jdGlvbiAoKSB7XG4gIC8vICAgICByZXR1cm4gQXV0aFNlcnZpY2VcbiAgLy8gICAgICAgLnJlcXVpcmVBdXRoZW50aWNhdGlvbigpXG4gIC8vICAgICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gIC8vICAgICAgICAgcmV0dXJuICRzdGF0ZS50YXJnZXQoJ2F1dGgubG9naW4nKTtcbiAgLy8gICAgICAgfSk7XG4gICAgLy8gfSk7XG4gIC8vICAgJHRyYW5zaXRpb25zLm9uU3RhcnQoe1xuICAvLyAgICAgdG86ICdhdXRoLionXG4gIC8vICAgfSwgZnVuY3Rpb24gKCkge1xuICAvLyAgICAgaWYgKEF1dGhTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gIC8vICAgICAgIHJldHVybiAkc3RhdGUudGFyZ2V0KCdhcHAnKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9KTtcbiAgLy8gfSk7XG4iLCJhbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbXBvbmVudHMuY29udGFjdCcsIFtcbiAgICAndWkucm91dGVyJ1xuICBdKTtcbiIsInZhciByb290ID0ge1xuICB0ZW1wbGF0ZVVybDogJy4vcm9vdC5odG1sJ1xufTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdyb290JylcbiAgLmNvbXBvbmVudCgncm9vdCcsIHJvb3QpO1xuIiwidmFyIGFwcE5hdiA9IHtcbiAgYmluZmluZ3M6IHtcbiAgICB1c2VyOiAnPCcsXG4gICAgb25Mb2dvdXQ6ICcmJ1xuICB9LFxuICB0ZW1wbGF0ZVVybDogJy4vYXBwLW5hdi5odG1sJ1xufTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdjb21tb24nKVxuICAuY29tcG9uZW50KCdhcHBOYXYnLCBhcHBOYXYpO1xuIiwidmFyIGFwcCA9IHtcbiAgdGVtcGxhdGVVcmw6ICcuL2FwcC5odG1sJyxcbiAgY29udHJvbGxlcjogJ0FwcENvbnRyb2xsZXInXG59O1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbW1vbicpXG4gIC5jb21wb25lbnQoJ2FwcCcsIGFwcClcbiAgLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAkc3RhdGVQcm92aWRlclxuICAgICAgLnN0YXRlKCdhcHAnLCB7XG4gICAgICAgIC8vcmVkaXJlY3RUbzogJ2NvbnRhY3RzJyxcbiAgICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICByZXF1aXJlZEF1dGg6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50OiAnYXBwJ1xuICAgICAgfSlcbiAgfSk7XG4iLCJmdW5jdGlvbiBBcHBDb250cm9sbGVyKEF1dGhTZXJ2aWNlLCAkc3RhdGUpIHtcbiAgdmFyIGN0cmwgPSB0aGlzO1xuICBjdHJsLnVzZXIgPSBBdXRoU2VydmljZS5nZXRVc2VyKCk7XG4gIGN0cmwubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIEF1dGhTZXJ2aWNlLmxvZ291dCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgJHN0YXRlLmdvKCdhdXRoLmxvZ2luJyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZSgnY29tbW9uJylcbiAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBBcHBDb250cm9sbGVyKTtcbiIsImZ1bmN0aW9uIGluaXQoJHVpUm91dGVyKSB7XG4gIHZhciBWaXN1YWxpemVyID0gd2luZG93Wyd1aS1yb3V0ZXItdmlzdWFsaXplciddLlZpc3VhbGl6ZXI7XG4gIHZhciBwbHVnaW5JbnN0YW5jZSA9ICR1aVJvdXRlci5wbHVnaW4oVmlzdWFsaXplcik7XG59XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZSgnY29tbW9uJylcbiAgLnJ1bihpbml0KVxuIiwiZnVuY3Rpb24gQXV0aFNlcnZpY2UoUGFyc2UpIHtcbiAgdmFyIGF1dGggPSBuZXcgUGFyc2UuVXNlcigpO1xuICB2YXIgYXV0aERhdGEgPSBudWxsO1xuICBmdW5jdGlvbiBzdG9yZUF1dGhEYXRhKHJlc3BvbnNlKSB7XG4gICAgYXV0aERhdGEgPSByZXNwb25zZTtcbiAgICByZXR1cm4gYXV0aERhdGE7XG4gIH1cbiAgLy8gZnVuY3Rpb24gb25TaWduSW4odXNlcikge1xuICAvLyAgIGF1dGhEYXRhID0gdXNlcjtcbiAgLy8gICByZXR1cm4gYXV0aC4kcmVxdWlyZVNpZ25JbigpO1xuICAvLyB9XG4gIGZ1bmN0aW9uIGNsZWFyQXV0aERhdGEoKSB7XG4gICAgYXV0aERhdGEgPSBudWxsO1xuICB9XG5cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgYXV0aC5zZXQoXCJ1c2VybmFtZVwiLCB1c2VyLmVtYWlsKTtcbiAgICBhdXRoLnNldChcImVtYWlsXCIsIHVzZXIuZW1haWwpO1xuICAgIGF1dGguc2V0KFwicGFzc3dvcmRcIiwgdXNlci5wYXNzd29yZCk7XG4gICAgICByZXR1cm4gYXV0aFxuICAgICAgICAuc2lnblVwKG51bGwsIHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihhdXRoKSB7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oYXV0aCwgZXJyb3IpIHtcbiAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yLmNvZGUgKyBcIiBcIiArIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oc3RvcmVBdXRoRGF0YSk7XG4gIH07XG5cbiAgdGhpcy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgYXV0aC5zZXQoXCJ1c2VybmFtZVwiLCB1c2VyLmVtYWlsKTtcbiAgICBhdXRoLnNldChcImVtYWlsXCIsIHVzZXIuZW1haWwpO1xuICAgIGF1dGguc2V0KFwicGFzc3dvcmRcIiwgdXNlci5wYXNzd29yZCk7XG4gICAgcmV0dXJuIGF1dGhcbiAgICAgIC5sb2dJbih1c2VyLmVtYWlsLCB1c2VyLnBhc3N3b3JkLCB7XG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGF1dGgpIHtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGF1dGgsIGVycm9yKSB7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbihzdG9yZUF1dGhEYXRhKTtcbiAgfTtcblxuICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXV0aFxuICAgIC5sb2dPdXQoKS50aGVuKCgpID0+IHtcbiAgICAgIGF1dGhEYXRhID0gUGFyc2UuVXNlci5jdXJyZW50KCk7XG4gICAgfSlcbiAgICAudGhlbihjbGVhckF1dGhEYXRhKTtcbiAgfTtcbiAgLy9cbiAgLy8gdGhpcy5yZXF1aXJlQXV0aGVudGljYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIC8vICAgcmV0dXJuIGF1dGhcbiAgLy8gICAgIC4kd2FpdEZvclNpZ25JbigpLnRoZW4ob25TaWduSW4pO1xuICAvLyB9O1xuICAvL1xuXG4gIHRoaXMuaXNBdXRoZW50aWNhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIWF1dGhEYXRhO1xuICB9O1xuXG4gIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0aERhdGEpIHtcbiAgICAgIHJldHVybiBhdXRoRGF0YTtcbiAgICB9XG4gIH07XG59O1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbXBvbmVudHMuYXV0aCcpXG4gIC5zZXJ2aWNlKCdBdXRoU2VydmljZScsIEF1dGhTZXJ2aWNlKTtcbiIsInZhciBhdXRoRm9ybSA9IHtcbiAgYmluZGluZ3M6IHtcbiAgICB1c2VyOiAnPCcsXG4gICAgYnV0dG9uOiAnQCcsXG4gICAgbWVzc2FnZTogJ0AnLFxuICAgIG9uU3VibWl0OiAnJidcbiAgfSxcbiAgdGVtcGxhdGVVcmw6ICcuL2F1dGgtZm9ybS5odG1sJyxcbiAgY29udHJvbGxlcjogJ0F1dGhGb3JtQ29udHJvbGxlcidcbn07XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZSgnY29tcG9uZW50cy5hdXRoJylcbiAgLmNvbXBvbmVudCgnYXV0aEZvcm0nLCBhdXRoRm9ybSk7XG4iLCJmdW5jdGlvbiBBdXRoRm9ybUNvbnRyb2xsZXIoKSB7XG4gIHZhciBjdHJsID0gdGhpcztcbiAgY3RybC4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy51c2VyKSB7XG4gICAgICBjdHJsLnVzZXIgPSBhbmd1bGFyLmNvcHkoY3RybC51c2VyKTtcbiAgICB9XG4gIH07XG4gIGN0cmwuc3VibWl0Rm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjdHJsLm9uU3VibWl0KHtcbiAgICAgICRldmVudDoge1xuICAgICAgICB1c2VyOiBjdHJsLnVzZXJcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cblxuYW5ndWxhclxuICAubW9kdWxlKCdjb21wb25lbnRzLmF1dGgnKVxuICAuY29udHJvbGxlcignQXV0aEZvcm1Db250cm9sbGVyJywgQXV0aEZvcm1Db250cm9sbGVyKTtcbiIsInZhciBsb2dpbiA9IHtcbiAgdGVtcGxhdGVVcmw6ICcuL2xvZ2luLmh0bWwnLFxuICBjb250cm9sbGVyOiAnTG9naW5Db250cm9sbGVyJ1xufTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdjb21wb25lbnRzLmF1dGgnKVxuICAuY29tcG9uZW50KCdsb2dpbicsIGxvZ2luKVxuICAuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgIC5zdGF0ZSgnYXV0aCcsIHtcbiAgICAgICAgcmVkaXJlY3RUbzogJ2F1dGgubG9naW4nLFxuICAgICAgICB1cmw6ICcvYXV0aCcsXG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdiB1aS12aWV3PjwvZGl2PidcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2F1dGgubG9naW4nLCB7XG4gICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgIGNvbXBvbmVudDogJ2xvZ2luJ1xuICAgICAgfSk7XG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2F1dGgvbG9naW4nKTtcbiAgfSk7XG4iLCJmdW5jdGlvbiBMb2dpbkNvbnRyb2xsZXIoQXV0aFNlcnZpY2UsICRzdGF0ZSkge1xuICB2YXIgY3RybCA9IHRoaXM7XG4gIGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjdHJsLmVycm9yID0gbnVsbDtcbiAgICBjdHJsLnVzZXIgPSB7XG4gICAgICBlbWFpbDogJycsXG4gICAgICBwYXNzd29yZDogJydcbiAgICB9O1xuICB9O1xuICBjdHJsLmxvZ2luVXNlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBBdXRoU2VydmljZVxuICAgICAgLmxvZ2luKGV2ZW50LnVzZXIpXG4gICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzdGF0ZS5nbygnYXBwJyk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGN0cmwuZXJyb3IgPSByZWFzb24ubWVzc2FnZTtcbiAgICAgIH0pO1xuICB9O1xufVxuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbXBvbmVudHMuYXV0aCcpXG4gIC5jb250cm9sbGVyKCdMb2dpbkNvbnRyb2xsZXInLCBMb2dpbkNvbnRyb2xsZXIpO1xuIiwidmFyIHJlZ2lzdGVyID0ge1xuICB0ZW1wbGF0ZVVybDogJy4vcmVnaXN0ZXIuaHRtbCcsXG4gIGNvbnRyb2xsZXI6ICdSZWdpc3RlckNvbnRyb2xsZXInXG59O1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2NvbXBvbmVudHMuYXV0aCcpXG4gIC5jb21wb25lbnQoJ3JlZ2lzdGVyJywgcmVnaXN0ZXIpXG4gIC5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgIC5zdGF0ZSgnYXV0aC5yZWdpc3RlcicsIHtcbiAgICAgICAgdXJsOiAnL3JlZ2lzdGVyJyxcbiAgICAgICAgY29tcG9uZW50OiAncmVnaXN0ZXInXG4gICAgICB9KTtcbiAgfSk7XG4iLCJmdW5jdGlvbiBSZWdpc3RlckNvbnRyb2xsZXIoQXV0aFNlcnZpY2UsICRzdGF0ZSkge1xuICB2YXIgY3RybCA9IHRoaXM7XG4gIGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjdHJsLmVycm9yID0gbnVsbDtcbiAgICBjdHJsLnVzZXIgPSB7XG4gICAgICBlbWFpbDogJycsXG4gICAgICBwYXNzd29yZDogJydcbiAgICB9O1xuICB9O1xuICBjdHJsLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gQXV0aFNlcnZpY2VcbiAgICAgIC5yZWdpc3RlcihldmVudC51c2VyKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAkc3RhdGUuZ28oJ2FwcCcpO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBjdHJsLmVycm9yID0gcmVhc29uLm1lc3NhZ2U7XG4gICAgICB9KTtcbiAgfTtcbn1cblxuYW5ndWxhclxuICAubW9kdWxlKCdjb21wb25lbnRzLmF1dGgnKVxuICAuY29udHJvbGxlcignUmVnaXN0ZXJDb250cm9sbGVyJywgUmVnaXN0ZXJDb250cm9sbGVyKTtcbiIsImFuZ3VsYXIubW9kdWxlKCd0ZW1wbGF0ZXMnLCBbXSkucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgeyR0ZW1wbGF0ZUNhY2hlLnB1dCgnLi9yb290Lmh0bWwnLCc8ZGl2IGNsYXNzPVwicm9vdFwiPlxcbiAgPGRpdiB1aS12aWV3PjwvZGl2PlxcbjwvZGl2PlxcbicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCcuL2FwcC1uYXYuaHRtbCcsJzxoZWFkZXIgY2xhc3M9XCJoZWFkZXJcIj5cXG4gIDxkaXYgY2xhc3M9XCJoZWFkZXJfX2ZpeGVkXCI+XFxuICAgIDxkaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl9fYnJhbmRcIj5cXG4gICAgICAgIENvbnRhY3RzXFxuICAgICAgICA8YSBocmVmPVwiXCIgY2xhc3M9XCJoZWFkZXJfX2J1dHRvbiBoZWFkZXJfX2J1dHRvbi0tbmV3LWNvbnRhY3RcIj5cXG4gICAgICAgICAgPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPmFkZF9jaXJjbGVfb3V0bGluZTwvaT5cXG4gICAgICAgICAgTmV3IENvbnRhY3RcXG4gICAgICAgIDwvYT5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyX19sb2dvdXRcIj5cXG4gICAgICAgIHt7IDo6JGN0cmwudXNlci5lbWFpbCB9fVxcbiAgICAgICAgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiJGN0cmwub25Mb2dvdXQoKTtcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJoZWFkZXJfX2J1dHRvblwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5wb3dlcl9zZXR0aW5nc19uZXc8L2k+XFxuICAgICAgICAgICAgTG9nb3V0XFxuICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDwvYT5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2hlYWRlcj5cXG4nKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dCgnLi9hcHAuaHRtbCcsJzxkaXYgY2xhc3M9XCJyb290XCI+XFxuICA8YXBwLW5hdiB1c2VyPVwiJGN0cmwudXNlclwiIG9uLWxvZ291dD1cIiRjdHJsLmxvZ291dCgpO1wiPjwvYXBwLW5hdj5cXG4gIDxkaXYgY2xhc3M9XCJhcHBcIj5cXG4gICAgPGRpdiB1aS12aWV3PjwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuJyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJy4vcmVnaXN0ZXIuaHRtbCcsJzxkaXYgY2xhc3M9XCJhdXRoXCI+XFxuICA8aDE+UmVnaXN0ZXI8L2gxPlxcbiAgPGF1dGgtZm9ybVxcbiAgICB1c2VyPVwiJGN0cmwudXNlclwiXFxuICAgIG1lc3NhZ2U9XCJ7eyAkY3RybC5lcnJvciB9fVwiXFxuICAgIGJ1dHRvbj1cIkNyZWF0ZSB1c2VyXCJcXG4gICAgb24tc3VibWl0PVwiJGN0cmwuY3JlYXRlVXNlcigkZXZlbnQpO1wiPlxcbiAgPC9hdXRoLWZvcm0+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cImF1dGhfX2luZm9cIj5cXG4gIDxhIHVpLXNyZWY9XCJhdXRoLmxvZ2luXCI+XFxuICAgIEFscmVhZHkgaGF2ZSBhbiBhY2NvdW50PyBMb2dpbiBoZXJlLlxcbiAgPC9hPlxcbjwvZGl2PlxcbicpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KCcuL2xvZ2luLmh0bWwnLCc8ZGl2IGNsYXNzPVwiYXV0aFwiPlxcbiAgPGgxPkxvZ2luPC9oMT5cXG4gIDxhdXRoLWZvcm1cXG4gICAgdXNlcj1cIiRjdHJsLnVzZXJcIlxcbiAgICBtZXNzYWdlPVwie3sgJGN0cmwuZXJyb3IgfX1cIlxcbiAgICBidXR0b249XCJMb2dpblwiXFxuICAgIG9uLXN1Ym1pdD1cIiRjdHJsLmxvZ2luVXNlcigkZXZlbnQpO1wiPlxcbiAgPC9hdXRoLWZvcm0+XFxuPC9kaXY+XFxuPGRpdiBjbGFzcz1cImF1dGhfX2luZm9cIj5cXG4gIDxhIHVpLXNyZWY9XCJhdXRoLnJlZ2lzdGVyXCI+XFxuICAgIERvblxcJ3QgaGF2ZSBhbiBhY2NvdW50PyBDcmVhdGUgb25lIGhlcmUuXFxuICA8L2E+XFxuPC9kaXY+XFxuJyk7XG4kdGVtcGxhdGVDYWNoZS5wdXQoJy4vYXV0aC1mb3JtLmh0bWwnLCc8Zm9ybSBuYW1lPVwiYXV0aEZvcm1cIiBub3ZhbGlkYXRlIG5nLXN1Ym1pdD1cIiRjdHJsLnN1Ym1pdEZvcm0oKTtcIj5cXG4gIDxsYWJlbD5cXG4gICAgPGlucHV0XFxuICAgICAgdHlwZT1cImVtYWlsXCJcXG4gICAgICBuYW1lPVwiZW1haWxcIlxcbiAgICAgIHJlcXVpcmVkPVwicmVxdWlyZWRcIlxcbiAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgeW91ciBlbWFpbFwiXFxuICAgICAgbmctbW9kZWw9XCIkY3RybC51c2VyLmVtYWlsXCI+XFxuICA8L2xhYmVsPlxcbiAgPGxhYmVsPlxcbiAgICA8aW5wdXRcXG4gICAgICB0eXBlPVwicGFzc3dvcmRcIlxcbiAgICAgIG5hbWU9XCJwYXNzd29yZFwiXFxuICAgICAgcmVxdWlyZWQ9XCJyZXF1aXJlZFwiXFxuICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIHBhc3N3b3JkXCJcXG4gICAgICBuZy1tb2RlbD1cIiRjdHJsLnVzZXIucGFzc3dvcmRcIj5cXG4gIDwvbGFiZWw+XFxuICA8ZGl2IGNsYXNzPVwiYXV0aC1idXR0b25cIj5cXG4gICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgbmctZGlzYWJsZWQ9XCJhdXRoRm9ybS4kaW52YWxpZFwiPlxcbiAgICAgIHt7ICRjdHJsLmJ1dHRvbiB9fVxcbiAgICA8L2J1dHRvbj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBuZy1pZj1cIiRjdHJsLm1lc3NhZ2VcIj5cXG4gICAge3sgJGN0cmwubWVzc2FnZSB9fVxcbiAgPC9kaXY+XFxuPC9mb3JtPlxcbicpO31dKTsiXX0=
