(function(angular){
'use strict';
angular
  .module('root', [
    'common',
    'components',
    'templates'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('components', [
    'components.contact',
    'components.auth'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('common', [
    'ui.router'
  ]);
  // .run(function ($transitions, cfpLoadingBar) {
  //   $transitions.onStart){}, cfpLoadingBar.start);
  //   $transitions.onSuccess({}, cfpLoadingBar.complete);
  // });
})(window.angular);
(function(angular){
'use strict';
angular
  .module('components.auth', [
    'ui.router',
    'ngParse'
  ])

  .config(['ParseProvider', function ($ParseProvider) {

    var MY_PARSE_APP_ID = 'Na9nmnwnvmp67Yt1BZ7jFKCCo1SUV8j04gbGFidH';
    var MY_PARSE_JS_KEY = 'bCUH3t5l5Ilyp19krDC4dv0jZuxmLC6OyQH8hztJ';
    $ParseProvider.initialize(MY_PARSE_APP_ID, MY_PARSE_JS_KEY);
    $ParseProvider.serverURL = 'https://parseapi.back4app.com/';
  }])

  .run(["$transitions", "$state", "AuthService", function ($transitions, $state, AuthService) {
    $transitions.onStart({
      to: function (state) {
        return !!(state.data && state.data.requiredAuth);
      }
    }, function() {
      return AuthService
        .requireAuthentication()
        .catch(function () {
          return $state.target('auth.login');
        });
    });
    $transitions.onStart({
      to: 'auth.*'
    }, function () {
      if (AuthService.isAuthenticated()) {
        return $state.target('app');
      }
    });
  }]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('components.contact', [
    'ui.router'
  ]);
})(window.angular);
(function(angular){
'use strict';
var root = {
  templateUrl: './root.html'
};

angular
  .module('root')
  .component('root', root);
})(window.angular);
(function(angular){
'use strict';
var appNav = {
  bindings: {
    user: '<',
    onLogout: '&'
  },
  templateUrl: './app-nav.html'
};

angular
  .module('common')
  .component('appNav', appNav);
})(window.angular);
(function(angular){
'use strict';
var app = {
  templateUrl: './app.html',
  controller: 'AppController'
};

angular
  .module('common')
  .component('app', app)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('app', {
        //redirectTo: 'contacts',
        url: '/app',
        data: {
          requiredAuth: true
        },
        component: 'app'
      })
  }]);
})(window.angular);
(function(angular){
'use strict';
AppController.$inject = ["AuthService", "$state"];
function AppController(AuthService, $state) {
  var ctrl = this;
  ctrl.user = AuthService.getUser();
  ctrl.logout = function () {
    AuthService.logout().then(function () {
      $state.go('auth.login');
    });
  };
}

angular
  .module('common')
  .controller('AppController', AppController);
})(window.angular);
(function(angular){
'use strict';
init.$inject = ["$uiRouter"];
function init($uiRouter) {
  var Visualizer = window['ui-router-visualizer'].Visualizer;
  var pluginInstance = $uiRouter.plugin(Visualizer);
}

angular
  .module('common')
  .run(init)
})(window.angular);
(function(angular){
'use strict';
AuthService.$inject = ["Parse"];
function AuthService(Parse) {
  var auth = new Parse.User();
  var currentUser = null;
  function storeAuthData(response) {
    currentUser = response;
    return currentUser;
  }
  // function onSignIn(user) {
  //   authData = user;
  //   return auth.$requireSignIn();
  // }
  function clearAuthData() {
    currentUser = Parse.User.current();
    return currentUser;
  }

  this.register = function (user) {
    auth.set("username", user.email);
    auth.set("email", user.email);
    auth.set("password", user.password);
      return auth
        .signUp(null, {
          success: function(auth) {
          },
          error: function(auth, error) {
          alert("Error: " + error.code + " " + error.message);
          }
        })
        .then(storeAuthData);
  };

  this.login = function (user) {
    return Parse.User
      .logIn(user.email, user.password, {
        success: function(auth) {
        },
        error: function(auth, error) {
        }
      })
      .then(storeAuthData);
  };

  this.logout = function () {
    return Parse.User.logOut().then(clearAuthData);
  };

  this.requireAuthentication = function () {
    return new Promise((resolve, reject) => {
      if (currentUser && currentUser.authenticated()) {
        resolve();
      } else {
        reject();
      }
    })
  };

  this.isAuthenticated = function () {
    return !!currentUser;
  };

  this.getUser = function () {
    if (currentUser) {
      return currentUser;
    }
  };
};

angular
  .module('components.auth')
  .service('AuthService', AuthService);
})(window.angular);
(function(angular){
'use strict';
var authForm = {
  bindings: {
    user: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './auth-form.html',
  controller: 'AuthFormController'
};

angular
  .module('components.auth')
  .component('authForm', authForm);
})(window.angular);
(function(angular){
'use strict';
function AuthFormController() {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.user) {
      ctrl.user = angular.copy(ctrl.user);
    }
  };
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
        user: ctrl.user
      }
    });
  };
}

angular
  .module('components.auth')
  .controller('AuthFormController', AuthFormController);
})(window.angular);
(function(angular){
'use strict';
var login = {
  templateUrl: './login.html',
  controller: 'LoginController'
};

angular
  .module('components.auth')
  .component('login', login)
  .config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
    $stateProvider
      .state('auth', {
        redirectTo: 'auth.login',
        url: '/auth',
        template: '<div ui-view></div>'
      })
      .state('auth.login', {
        url: '/login',
        component: 'login'
      });
    $urlRouterProvider.otherwise('/auth/login');
  }]);
})(window.angular);
(function(angular){
'use strict';
LoginController.$inject = ["AuthService", "$state"];
function LoginController(AuthService, $state) {
  var ctrl = this;
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = {
      email: '',
      password: ''
    };
  };
  ctrl.loginUser = function (event) {
    return AuthService
      .login(event.user)
      .then(function () {
        $state.go('app');
      }, function (reason) {
        ctrl.error = reason.message;
      });
  };
}

angular
  .module('components.auth')
  .controller('LoginController', LoginController);
})(window.angular);
(function(angular){
'use strict';
var register = {
  templateUrl: './register.html',
  controller: 'RegisterController'
};

angular
  .module('components.auth')
  .component('register', register)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('auth.register', {
        url: '/register',
        component: 'register'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';
RegisterController.$inject = ["AuthService", "$state"];
function RegisterController(AuthService, $state) {
  var ctrl = this;
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = {
      email: '',
      password: ''
    };
  };
  ctrl.createUser = function (event) {
    return AuthService
      .register(event.user)
      .then(function () {
        $state.go('app');
      }, function (reason) {
        ctrl.error = reason.message;
      });
  };
}

angular
  .module('components.auth')
  .controller('RegisterController', RegisterController);
})(window.angular);
(function(angular){
'use strict';
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('./root.html','<div class="root">\n  <div ui-view></div>\n</div>\n');
$templateCache.put('./app-nav.html','<header class="header">\n  <div class="header__fixed">\n    <div>\n      <div class="header__brand">\n        Contacts\n        <a href="" class="header__button header__button--new-contact">\n          <i class="material-icons">add_circle_outline</i>\n          New Contact\n        </a>\n      </div>\n      <div class="header__logout">\n        {{ ::$ctrl.user.email }}\n        <a href="" ng-click="$ctrl.onLogout();">\n          <span class="header__button">\n            <i class="material-icons">power_settings_new</i>\n            Logout\n          </span>\n        </a>\n      </div>\n    </div>\n  </div>\n</header>\n');
$templateCache.put('./app.html','<div class="root">\n  <app-nav user="$ctrl.user" on-logout="$ctrl.logout();"></app-nav>\n  <div class="app">\n    <div ui-view></div>\n  </div>\n</div>\n');
$templateCache.put('./register.html','<div class="auth">\n  <h1>Register</h1>\n  <auth-form\n    user="$ctrl.user"\n    message="{{ $ctrl.error }}"\n    button="Create user"\n    on-submit="$ctrl.createUser($event);">\n  </auth-form>\n</div>\n<div class="auth__info">\n  <a ui-sref="auth.login">\n    Already have an account? Login here.\n  </a>\n</div>\n');
$templateCache.put('./auth-form.html','<form name="authForm" novalidate ng-submit="$ctrl.submitForm();">\n  <label>\n    <input\n      type="email"\n      name="email"\n      required="required"\n      placeholder="Enter your email"\n      ng-model="$ctrl.user.email">\n  </label>\n  <label>\n    <input\n      type="password"\n      name="password"\n      required="required"\n      placeholder="Enter your password"\n      ng-model="$ctrl.user.password">\n  </label>\n  <div class="auth-button">\n    <button type="submit" ng-disabled="authForm.$invalid">\n      {{ $ctrl.button }}\n    </button>\n  </div>\n  <div ng-if="$ctrl.message">\n    {{ $ctrl.message }}\n  </div>\n</form>\n');
$templateCache.put('./login.html','<div class="auth">\n  <h1>Login</h1>\n  <auth-form\n    user="$ctrl.user"\n    message="{{ $ctrl.error }}"\n    button="Login"\n    on-submit="$ctrl.loginUser($event);">\n  </auth-form>\n</div>\n<div class="auth__info">\n  <a ui-sref="auth.register">\n    Don\'t have an account? Create one here.\n  </a>\n</div>\n');}]);})(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
